{"stats":{"totalMutantsCount":10,"killedCount":9,"notCoveredCount":0,"escapedCount":0,"errorCount":1,"syntaxErrorCount":0,"skippedCount":0,"ignoredCount":0,"timeOutCount":0,"msi":100,"mutationCodeCoverage":100,"coveredCodeMsi":100},"escaped":[],"timeouted":[],"killed":[{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nfinal class CalculationDV\n{\n    public static function bradescoAgency(string $agency) : int\n    {\n        \/** @var int $digit *\/\n        $digit = Useful::modulo11(value: $agency, resto10: 'P');\n        return $digit;\n    }\n    public static function bradescoAccount(string $account) : int\n    {\n        \/** @var int $digit *\/\n        $digit = Useful::modulo11(value: $account, resto10: 'P');\n        return $digit;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nfinal class CalculationDV\n{\n    protected static function bradescoAgency(string $agency) : int\n    {\n        \/** @var int $digit *\/\n        $digit = Useful::modulo11(value: $agency, resto10: 'P');\n        return $digit;\n    }\n    public static function bradescoAccount(string $account) : int\n    {\n        \/** @var int $digit *\/\n        $digit = Useful::modulo11(value: $account, resto10: 'P');\n        return $digit;\n    }\n}","originalFilePath":"\/var\/www\/edinei\/payments\/src\/Helper\/CalculationDV.php","originalStartLine":9},"diff":"--- Original\n+++ New\n@@ @@\n \n final class CalculationDV\n {\n-    public static function bradescoAgency(string $agency) : int\n+    protected static function bradescoAgency(string $agency) : int\n     {\n         \/** @var int $digit *\/\n         $digit = Useful::modulo11(value: $agency, resto10: 'P');","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.14\nConfiguration: \/tmp\/infection\/phpunitConfiguration.46762c08a5f86b56576d53311be3ea55.infection.xml\n\nE.EEEEEEE..........                                               19 \/ 19 (100%)\n\nTime: 00:00.106, Memory: 28.00 MB\n\nBradesco (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Shipping\\Bradesco)\n \u2714 Shipping not wallet\n \u2714 Get client code\n \u2718 Header\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAgency() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:48\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:146\n   \u2502\n \u2718 Header batch\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAgency() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:83\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:155\n   \u2502\n \u2714 Segment a\n \u2714 Segment b\n \u2714 Segment c\n \u2714 Detail\n \u2718 Trailer batch\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAgency() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:48\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:205\n   \u2502\n \u2714 Trailer\n \u2718 Generate\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAgency() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:48\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:224\n   \u2502\n \u2714 Get finality\n \u2714 Status\n \u2714 Add payment\n \u2718 Header position 73\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAgency() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:48\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:286\n   \u2502\n \u2718 Header batch position 218\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAgency() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:48\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:299\n   \u2502\n \u2718 Segment b position 123\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAgency() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:48\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:310\n   \u2502\n\nCalculation DV (EdineiValdameri\\Pagamentos\\Tests\\Unit\\CalculationDV)\n \u2718 Bradesco agency\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAgency() from scope EdineiValdameri\\Pagamentos\\Tests\\Unit\\CalculationDVTest\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/CalculationDVTest.php:14\n   \u2502\n \u2714 Bradesco account\n\nERRORS!\nTests: 19, Assertions: 37, Errors: 8."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nfinal class CalculationDV\n{\n    public static function bradescoAgency(string $agency) : int\n    {\n        \/** @var int $digit *\/\n        $digit = Useful::modulo11(value: $agency, resto10: 'P');\n        return $digit;\n    }\n    public static function bradescoAccount(string $account) : int\n    {\n        \/** @var int $digit *\/\n        $digit = Useful::modulo11(value: $account, resto10: 'P');\n        return $digit;\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nfinal class CalculationDV\n{\n    public static function bradescoAgency(string $agency) : int\n    {\n        \/** @var int $digit *\/\n        $digit = Useful::modulo11(value: $agency, resto10: 'P');\n        return $digit;\n    }\n    protected static function bradescoAccount(string $account) : int\n    {\n        \/** @var int $digit *\/\n        $digit = Useful::modulo11(value: $account, resto10: 'P');\n        return $digit;\n    }\n}","originalFilePath":"\/var\/www\/edinei\/payments\/src\/Helper\/CalculationDV.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n         $digit = Useful::modulo11(value: $agency, resto10: 'P');\n         return $digit;\n     }\n-    public static function bradescoAccount(string $account) : int\n+    protected static function bradescoAccount(string $account) : int\n     {\n         \/** @var int $digit *\/\n         $digit = Useful::modulo11(value: $account, resto10: 'P');","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.14\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0289b0a16a96b3302d74232c40e54e12.infection.xml\n\nE.EEE.EEEE.........                                               19 \/ 19 (100%)\n\nTime: 00:00.106, Memory: 28.00 MB\n\nBradesco (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Shipping\\Bradesco)\n \u2714 Shipping not wallet\n \u2714 Get client code\n \u2718 Header\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAccount() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:50\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:146\n   \u2502\n \u2718 Header batch\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAccount() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:85\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:155\n   \u2502\n \u2714 Segment a\n \u2714 Segment b\n \u2714 Segment c\n \u2714 Detail\n \u2718 Trailer batch\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAccount() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:50\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:205\n   \u2502\n \u2714 Trailer\n \u2718 Generate\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAccount() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:50\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:224\n   \u2502\n \u2714 Get finality\n \u2714 Status\n \u2714 Add payment\n \u2718 Header position 73\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAccount() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:50\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:286\n   \u2502\n \u2718 Header batch position 218\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAccount() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:50\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:299\n   \u2502\n \u2718 Segment b position 123\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAccount() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:50\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:310\n   \u2502\n\nCalculation DV (EdineiValdameri\\Pagamentos\\Tests\\Unit\\CalculationDV)\n \u2714 Bradesco agency\n \u2718 Bradesco account\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\CalculationDV::bradescoAccount() from scope EdineiValdameri\\Pagamentos\\Tests\\Unit\\CalculationDVTest\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/CalculationDVTest.php:31\n   \u2502\n\nERRORS!\nTests: 19, Assertions: 43, Errors: 8."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    protected static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","originalFilePath":"\/var\/www\/edinei\/payments\/src\/Helper\/Useful.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n use Exception;\n final class Useful\n {\n-    public static function onlyNumbers(string $string) : string\n+    protected static function onlyNumbers(string $string) : string\n     {\n         \/** @var string $return *\/\n         $return = preg_replace('\/[^[:digit:]]\/', '', $string);","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.14\nConfiguration: \/tmp\/infection\/phpunitConfiguration.322f501b76fe4b95660aa302d7729e51.infection.xml\n\nEEEEEEEEE........................                                 33 \/ 33 (100%)\n\nTime: 00:00.134, Memory: 28.00 MB\n\nBradesco (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Shipping\\Bradesco)\n \u2714 Shipping not wallet\n \u2714 Get client code\n \u2718 Header\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\Useful::onlyNumbers() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:44\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:146\n   \u2502\n \u2718 Header batch\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\Useful::onlyNumbers() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:79\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:155\n   \u2502\n \u2714 Segment a\n \u2718 Segment b\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\Useful::onlyNumbers() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:192\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:173\n   \u2502\n \u2714 Segment c\n \u2718 Detail\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\Useful::onlyNumbers() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:192\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:105\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:191\n   \u2502\n \u2718 Trailer batch\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\Useful::onlyNumbers() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:44\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:205\n   \u2502\n \u2714 Trailer\n \u2718 Generate\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\Useful::onlyNumbers() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:44\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:224\n   \u2502\n \u2714 Get finality\n \u2714 Status\n \u2714 Add payment\n \u2718 Header position 73\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\Useful::onlyNumbers() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:44\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:286\n   \u2502\n \u2718 Header batch position 218\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\Useful::onlyNumbers() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:44\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:299\n   \u2502\n \u2718 Segment b position 123\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\Useful::onlyNumbers() from scope EdineiValdameri\\Pagamentos\\Shipping\\Cnab240\\Bank\\Bradesco\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/Bank\/Bradesco.php:44\n   \u2502 \/var\/www\/edinei\/payments\/src\/Shipping\/Cnab240\/AbstractShipping.php:18\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/Shipping\/BradescoTest.php:310\n   \u2502\n\nUseful (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Useful)\n \u2714 Add field\n \u2714 Add field exception\n \u2714 Add field initial superior final exception\n \u2714 Add field superior file exception mutation\n \u2714 Add field superior file exception\n \u2714 Add field superior file exception\n \u2714 Format cnab\n \u2714 Format cnab type invalid\n \u2714 Format cnab decimals less than zero\n \u2714 Modulos\n \u2714 Normalize chars\n \u2714 Upper\n \u2714 Ksort abstract part\n \u2714 Field already exists\n \u2714 Conflict with field\n \u2714 Part not field\n\nERRORS!\nTests: 33, Assertions: 74, Errors: 9."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    protected static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","originalFilePath":"\/var\/www\/edinei\/payments\/src\/Helper\/Useful.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n         $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n         return $return;\n     }\n-    public static function upper(string $string) : string\n+    protected static function upper(string $string) : string\n     {\n         return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n     }","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.14\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a2bfb39d9b05b64d9b610d9904b77553.infection.xml\n\nE................................                                 33 \/ 33 (100%)\n\nTime: 00:00.137, Memory: 28.00 MB\n\nBradesco (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Shipping\\Bradesco)\n \u2714 Shipping not wallet\n \u2714 Get client code\n \u2714 Header\n \u2714 Header batch\n \u2714 Segment a\n \u2714 Segment b\n \u2714 Segment c\n \u2714 Detail\n \u2714 Trailer batch\n \u2714 Trailer\n \u2714 Generate\n \u2714 Get finality\n \u2714 Status\n \u2714 Add payment\n \u2714 Header position 73\n \u2714 Header batch position 218\n \u2714 Segment b position 123\n\nUseful (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Useful)\n \u2714 Add field\n \u2714 Add field exception\n \u2714 Add field initial superior final exception\n \u2714 Add field superior file exception mutation\n \u2714 Add field superior file exception\n \u2714 Add field superior file exception\n \u2714 Format cnab\n \u2714 Format cnab type invalid\n \u2714 Format cnab decimals less than zero\n \u2714 Modulos\n \u2714 Normalize chars\n \u2718 Upper\n   \u2502\n   \u2502 Error: Call to protected method EdineiValdameri\\Pagamentos\\Helper\\Useful::upper() from scope EdineiValdameri\\Pagamentos\\Tests\\Unit\\UsefulTest\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/UsefulTest.php:109\n   \u2502\n \u2714 Ksort abstract part\n \u2714 Field already exists\n \u2714 Conflict with field\n \u2714 Part not field\n\nERRORS!\nTests: 33, Assertions: 91, Errors: 1."},{"mutator":{"mutatorName":"MBString","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","originalFilePath":"\/var\/www\/edinei\/payments\/src\/Helper\/Useful.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public static function upper(string $string) : string\n     {\n-        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n+        return strtr(strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n     }\n     public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n     {","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.14\nConfiguration: \/tmp\/infection\/phpunitConfiguration.182c113c4da04e5426cc8e77da9b783b.infection.xml\n\nF\n\nTime: 00:00.056, Memory: 26.00 MB\n\nUseful (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Useful)\n \u2718 Upper\n   \u2502\n   \u2502 Failed asserting that two strings are equal.\n   \u2502 --- Expected\n   \u2502 +++ Actual\n   \u2502 @@ @@\n   \u2502 -'\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u0158'\n   \u2502 +'\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df'\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/UsefulTest.php:110\n   \u2502\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = -1, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","originalFilePath":"\/var\/www\/edinei\/payments\/src\/Helper\/Useful.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n     }\n-    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n+    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = -1, string $sFill = '') : string\n     {\n         if ($dec < 0) {\n             throw new Exception('Decimais n\u00e3o pode ser menor que 0');","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.14\nConfiguration: \/tmp\/infection\/phpunitConfiguration.8356ba6ff6a1a791b6c2432207949f24.infection.xml\n\nEF\n\nTime: 00:00.055, Memory: 26.00 MB\n\nUseful (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Useful)\n \u2718 Format cnab\n   \u2502\n   \u2502 Exception: Decimais n\u00e3o pode ser menor que 0\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Helper\/Useful.php:22\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/UsefulTest.php:58\n   \u2502\n \u2718 Format cnab type invalid\n   \u2502\n   \u2502 Failed asserting that exception message 'Decimais n\u00e3o pode ser menor que 0' contains 'Tipo inv\u00e1lido'.\n\n   \u2502\n\nERRORS!\nTests: 2, Assertions: 2, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 1, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","originalFilePath":"\/var\/www\/edinei\/payments\/src\/Helper\/Useful.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n     }\n-    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n+    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 1, string $sFill = '') : string\n     {\n         if ($dec < 0) {\n             throw new Exception('Decimais n\u00e3o pode ser menor que 0');","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.14\nConfiguration: \/tmp\/infection\/phpunitConfiguration.cd10644093d1c5bc752797f51c5a1921.infection.xml\n\nF\n\nTime: 00:00.054, Memory: 26.00 MB\n\nUseful (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Useful)\n \u2718 Format cnab\n   \u2502\n   \u2502 Failed asserting that two strings are equal.\n   \u2502 --- Expected\n   \u2502 +++ Actual\n   \u2502 @@ @@\n   \u2502 -'0000001234'\n   \u2502 +'0000012340'\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/UsefulTest.php:58\n   \u2502\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"LessThan","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec <= 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","originalFilePath":"\/var\/www\/edinei\/payments\/src\/Helper\/Useful.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n     {\n-        if ($dec < 0) {\n+        if ($dec <= 0) {\n             throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n         }\n         if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.14\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b4e761184d52120b83be5905c626230e.infection.xml\n\nEF\n\nTime: 00:00.058, Memory: 26.00 MB\n\nUseful (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Useful)\n \u2718 Format cnab\n   \u2502\n   \u2502 Exception: Decimais n\u00e3o pode ser menor que 0\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Helper\/Useful.php:22\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/UsefulTest.php:58\n   \u2502\n \u2718 Format cnab type invalid\n   \u2502\n   \u2502 Failed asserting that exception message 'Decimais n\u00e3o pode ser menor que 0' contains 'Tipo inv\u00e1lido'.\n\n   \u2502\n\nERRORS!\nTests: 2, Assertions: 2, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"LessThanNegotiation","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec >= 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","originalFilePath":"\/var\/www\/edinei\/payments\/src\/Helper\/Useful.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n     {\n-        if ($dec < 0) {\n+        if ($dec >= 0) {\n             throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n         }\n         if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.14\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9a53cc602fea7ba0403f604ac82c14eb.infection.xml\n\nEF\n\nTime: 00:00.056, Memory: 26.00 MB\n\nUseful (EdineiValdameri\\Pagamentos\\Tests\\Unit\\Useful)\n \u2718 Format cnab\n   \u2502\n   \u2502 Exception: Decimais n\u00e3o pode ser menor que 0\n   \u2502\n   \u2502 \/var\/www\/edinei\/payments\/src\/Helper\/Useful.php:22\n   \u2502 \/var\/www\/edinei\/payments\/tests\/Unit\/UsefulTest.php:58\n   \u2502\n \u2718 Format cnab type invalid\n   \u2502\n   \u2502 Failed asserting that exception message 'Decimais n\u00e3o pode ser menor que 0' contains 'Tipo inv\u00e1lido'.\n\n   \u2502\n\nERRORS!\nTests: 2, Assertions: 2, Errors: 1, Failures: 1."}],"errored":[{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","mutatedSourceCode":"<?php\n\ndeclare (strict_types=1);\nnamespace EdineiValdameri\\Pagamentos\\Helper;\n\nuse Exception;\nfinal class Useful\n{\n    public static function onlyNumbers(string $string) : string\n    {\n        \/** @var string $return *\/\n        $return = preg_replace('\/[^[:digit:]]\/', '', $string);\n        return $return;\n    }\n    public static function upper(string $string) : string\n    {\n        return strtr(mb_strtoupper($string), '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f7\u00f8\u00f9\u00fc\u00fa\u00fe\u00ff', '\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d7\u00d8\u00d9\u00dc\u00da\u00de\u00df');\n    }\n    public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n    {\n        if ($dec < 0) {\n            new Exception('Decimais n\u00e3o pode ser menor que 0');\n        }\n        if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n            throw new Exception('Tipo inv\u00e1lido');\n        }\n        $tipo = self::upper($tipo);\n        \/** @var string $normalize *\/\n        $normalize = self::normalizeChars($valor);\n        $valor = self::upper($normalize);\n        $type = 's';\n        $left = '';\n        if (in_array($tipo, ['9', 'N', '9L', 'NL'], true)) {\n            if (in_array($tipo, ['9L', 'NL'], true)) {\n                $valor = self::onlyNumbers($valor);\n            }\n            $sFill = 0;\n            if ($dec >= 1) {\n                $valor = sprintf(\"%.{$dec}f\", $valor);\n            }\n            if (str_contains($valor, '.')) {\n                $valor = str_replace('.', '', $valor);\n            }\n        } elseif (in_array($tipo, ['A', 'X'], true)) {\n            $left = '-';\n        }\n        return sprintf(\"%{$left}{$sFill}{$tamanho}{$type}\", substr($valor, 0, $tamanho));\n    }\n    public static function modulo11(string $value, int $factor = 2, int $base = 9, int $x10 = 0, int|string $resto10 = '0') : int|string\n    {\n        $sum = 0;\n        $resto = 10;\n        for ($i = strlen($value); $i > 0; $i--) {\n            $sum += $value[$i - 1] * $factor;\n            \/\/ @phpstan-ignore-line\n            if ($factor === $base) {\n                $factor = 1;\n            }\n            $factor++;\n        }\n        if ($x10 == 0) {\n            $sum *= 10;\n            $digito = $sum % 11;\n            if ($digito === $resto) {\n                return $resto10;\n            }\n            return $digito;\n        }\n        return $sum % 11;\n    }\n    public static function normalizeChars(string $string) : array|string|null\n    {\n        $normalizeChars = ['\u00c1' => 'A', '\u00c0' => 'A', '\u00c2' => 'A', '\u00c3' => 'A', '\u00c5' => 'A', '\u00c4' => 'A', '\u00c6' => 'AE', '\u00c7' => 'C', '\u00c9' => 'E', '\u00c8' => 'E', '\u00ca' => 'E', '\u00cb' => 'E', '\u00cd' => 'I', '\u00cc' => 'I', '\u00ce' => 'I', '\u00cf' => 'I', '\u00d0' => 'Eth', '\u00d1' => 'N', '\u00d3' => 'O', '\u00d2' => 'O', '\u00d4' => 'O', '\u00d5' => 'O', '\u00d6' => 'O', '\u00d8' => 'O', '\u00da' => 'U', '\u00d9' => 'U', '\u00db' => 'U', '\u00dc' => 'U', '\u00dd' => 'Y', '\u0154' => 'R', '\u00e1' => 'a', '\u00e0' => 'a', '\u00e2' => 'a', '\u00e3' => 'a', '\u00e5' => 'a', '\u00e4' => 'a', '\u00e6' => 'ae', '\u00e7' => 'c', '\u00e9' => 'e', '\u00e8' => 'e', '\u00ea' => 'e', '\u00eb' => 'e', '\u00ed' => 'i', '\u00ec' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f0' => 'eth', '\u00f1' => 'n', '\u00f3' => 'o', '\u00f2' => 'o', '\u00f4' => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00fa' => 'u', '\u00f9' => 'u', '\u00fb' => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u0155' => 'r', '\u00ff' => 'y', '\u00df' => 'sz', '\u00fe' => 'thorn', '\u00ba' => '', '\u00aa' => '', '\u00b0' => ''];\n        return preg_replace('\/[^0-9a-zA-Z !+=*\\\\-,.;:%@_]\/', '', strtr($string, $normalizeChars));\n    }\n}","originalFilePath":"\/var\/www\/edinei\/payments\/src\/Helper\/Useful.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n     public static function formatCnab(string $tipo, string $valor, int $tamanho, int $dec = 0, string $sFill = '') : string\n     {\n         if ($dec < 0) {\n-            throw new Exception('Decimais n\u00e3o pode ser menor que 0');\n+            new Exception('Decimais n\u00e3o pode ser menor que 0');\n         }\n         if (!in_array($tipo, ['9', 'N', '9L', 'NL', 'A', 'X'], true)) {\n             throw new Exception('Tipo inv\u00e1lido');","processOutput":"PHPUnit 10.5.36 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.14\nConfiguration: \/tmp\/infection\/phpunitConfiguration.752fa14901b1f7302f8935d668f23f11.infection.xml\n\nF"}],"syntaxErrors":[],"uncovered":[],"ignored":[]}